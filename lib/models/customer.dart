import 'package:floor/floor.dart';

/// Customer entity class for Floor database storage
/// Represents a customer record in the database:
/// customer first name, last name, address, and date of birth
@entity
class Customer {
  /// Primary key for the customer record
  /// Unique identifier for each customer
  /// Uses auto-increment
  @PrimaryKey(autoGenerate: true)
  final int? id;

  /// Customer's first name
  /// Required field for customer identification
  final String firstName;

  /// Customer's last name
  /// Required field for customer identification
  final String lastName;

  /// Customer's address
  /// Required field for customer contact information
  final String address;

  /// Customer's date of birth
  /// Required field stored as string in YYYY-MM-DD format
  final String dateOfBirth;

  /// Constructor for Customer
  /// Primary key can be null for new records (auto-generated by database)
  ///
  /// [id] - Unique identifier (null for new records, auto-generated)
  /// [firstName] - Customer's first name
  /// [lastName] - Customer's last name
  /// [address] - Customer's address
  /// [dateOfBirth] - Date of birth in YYYY-MM-DD format
  Customer({
    this.id,
    required this.firstName,
    required this.lastName,
    required this.address,
    required this.dateOfBirth,
  });

  /// Named constructor for creating new customers without ID
  /// Database will auto-generate the ID when inserted
  ///
  /// [firstName] - Customer's first name
  /// [lastName] - Customer's last name
  /// [address] - Customer's address
  /// [dateOfBirth] - Date of birth in YYYY-MM-DD format
  ///
  /// Returns: New Customer instance ready for database insertion
  factory Customer.create({
    required String firstName,
    required String lastName,
    required String address,
    required String dateOfBirth,
  }) {
    return Customer(
      id: null, // Auto-generated by database
      firstName: firstName,
      lastName: lastName,
      address: address,
      dateOfBirth: dateOfBirth,
    );
  }

  /// Getter for display title in ListView
  ///
  /// Returns: Formatted title string for list display
  String get displayTitle => '$firstName $lastName';

  /// Getter for full name
  /// Used in various display contexts
  ///
  /// Returns: Full name as "FirstName LastName"
  String get fullName => '$firstName $lastName';

  /// Getter for detailed information display
  /// Used in detail view when customer is selected
  ///
  /// Returns: Formatted string with all customer information
  String get detailInfo =>
      'Customer ID: ${id ?? 'New'}\n'
          'Name: $firstName $lastName\n'
          'Address: $address\n'
          'Date of Birth: $dateOfBirth';

  /// Creates a copy of this Customer with modified fields
  ///
  /// [id] - New ID (optional, defaults to current)
  /// [firstName] - New first name (optional, defaults to current)
  /// [lastName] - New last name (optional, defaults to current)
  /// [address] - New address (optional, defaults to current)
  /// [dateOfBirth] - New date of birth (optional, defaults to current)
  ///
  /// Returns: New Customer instance with updated values
  Customer copyWith({
    int? id,
    String? firstName,
    String? lastName,
    String? address,
    String? dateOfBirth,
  }) {
    return Customer(
      id: id ?? this.id,
      firstName: firstName ?? this.firstName,
      lastName: lastName ?? this.lastName,
      address: address ?? this.address,
      dateOfBirth: dateOfBirth ?? this.dateOfBirth,
    );
  }

  /// Validates that all required fields have valid values
  /// Used for form validation before saving to database
  ///
  /// Returns: true if all fields are valid, false otherwise
  bool isValid() {
    return firstName.trim().isNotEmpty &&
        lastName.trim().isNotEmpty &&
        address.trim().isNotEmpty &&
        dateOfBirth.isNotEmpty;
  }

  /// Creates a Customer from a Map
  /// Handles null ID values for new records
  ///
  /// [map] - Map containing customer data
  ///
  /// Returns: Customer instance created from map data
  factory Customer.fromMap(Map<String, dynamic> map) {
    return Customer(
      id: map['id'], // Can be null for new records
      firstName: map['firstName'] ?? '',
      lastName: map['lastName'] ?? '',
      address: map['address'] ?? '',
      dateOfBirth: map['dateOfBirth'] ?? '',
    );
  }

  /// Converts Customer to Map
  /// Excludes null ID values for database insertion
  ///
  /// Returns: Map representation of the customer
  Map<String, dynamic> toMap() {
    final map = <String, dynamic>{
      'firstName': firstName,
      'lastName': lastName,
      'address': address,
      'dateOfBirth': dateOfBirth,
    };

    // Only include ID if it's not null (for updates)
    if (id != null) {
      map['id'] = id;
    }

    return map;
  }

  /// String representation of the Customer
  ///
  /// Returns: string representation
  @override
  String toString() {
    return 'Customer{id: ${id ?? 'null'}, firstName: $firstName, lastName: $lastName, '
        'address: $address, dateOfBirth: $dateOfBirth}';
  }
}