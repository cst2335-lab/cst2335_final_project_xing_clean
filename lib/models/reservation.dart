// lib/models/reservation.dart
import 'package:floor/floor.dart';

/// Reservation entity class for Floor database storage
/// Represents a flight reservation record in the database
///
/// Project Requirements Addressed:
/// * Requirement 3: Database storage using Floor SQLite
/// * Data model for reservation page implementation
/// * Stores customer ID, flight ID, flight date, and reservation name
/// * Implements proper database auto-increment for primary key
@entity
class Reservation {
  /// Primary key for the reservation record
  /// Unique identifier for each reservation
  /// Uses auto-increment to ensure unique IDs across app restarts
  @PrimaryKey(autoGenerate: true)
  final int? id;

  /// ID of the customer who made the reservation
  /// Requirement: Integer representing customer ID (can be any int)
  final int customerId;

  /// ID of the flight that was reserved
  /// Requirement: Integer representing flight ID from flight schedule
  final int flightId;

  /// Date when the flight is scheduled
  /// Requirement: Date of flight as string format (YYYY-MM-DD)
  final String flightDate;

  /// Name or description for this reservation
  /// Requirement: TextField for user to add reservation name
  /// Examples: "My summer vacation", "Business trip to Paris"
  final String reservationName;

  /// Constructor for Reservation
  /// Primary key can be null for new records (auto-generated by database)
  ///
  /// [id] - Unique identifier (null for new records, auto-generated)
  /// [customerId] - Customer who made the reservation
  /// [flightId] - Flight that was reserved
  /// [flightDate] - Date of the flight (YYYY-MM-DD format)
  /// [reservationName] - User-friendly name for the reservation
  Reservation({
    this.id,
    required this.customerId,
    required this.flightId,
    required this.flightDate,
    required this.reservationName,
  });

  /// Named constructor for creating new reservations without ID
  /// Database will auto-generate the ID when inserted
  ///
  /// [customerId] - Customer who made the reservation
  /// [flightId] - Flight that was reserved
  /// [flightDate] - Date of the flight (YYYY-MM-DD format)
  /// [reservationName] - User-friendly name for the reservation
  ///
  /// Returns: New Reservation instance ready for database insertion
  factory Reservation.create({
    required int customerId,
    required int flightId,
    required String flightDate,
    required String reservationName,
  }) {
    return Reservation(
      id: null, // Auto-generated by database
      customerId: customerId,
      flightId: flightId,
      flightDate: flightDate,
      reservationName: reservationName,
    );
  }

  /// Getter for display title in ListView
  /// Requirement 1: ListView displays items inserted by user
  ///
  /// Returns: Formatted title string for list display
  String get displayTitle => 'Reservation #${id ?? 'New'}';

  /// Getter for display subtitle in ListView
  /// Shows key information about the reservation in compact format
  ///
  /// Returns: Formatted subtitle with customer, flight, and date info
  String get displaySubtitle =>
      'Customer: $customerId | Flight: $flightId | Date: $flightDate';

  /// Getter for detailed information display
  /// Used in detail view when reservation is selected
  ///
  /// Returns: Formatted string with all reservation information
  String get detailInfo =>
      'Reservation ID: ${id ?? 'New'}\n'
          'Customer ID: $customerId\n'
          'Flight ID: $flightId\n'
          'Flight Date: $flightDate\n'
          'Reservation Name: $reservationName';

  /// Creates a copy of this Reservation with modified fields
  /// Useful for updates and data manipulation in forms
  ///
  /// [id] - New ID (optional, defaults to current)
  /// [customerId] - New customer ID (optional, defaults to current)
  /// [flightId] - New flight ID (optional, defaults to current)
  /// [flightDate] - New flight date (optional, defaults to current)
  /// [reservationName] - New reservation name (optional, defaults to current)
  ///
  /// Returns: New Reservation instance with updated values
  Reservation copyWith({
    int? id,
    int? customerId,
    int? flightId,
    String? flightDate,
    String? reservationName,
  }) {
    return Reservation(
      id: id ?? this.id,
      customerId: customerId ?? this.customerId,
      flightId: flightId ?? this.flightId,
      flightDate: flightDate ?? this.flightDate,
      reservationName: reservationName ?? this.reservationName,
    );
  }

  /// Validates that all required fields have valid values
  /// Used for form validation before saving to database
  ///
  /// Returns: true if all fields are valid, false otherwise
  bool isValid() {
    return customerId > 0 &&
        flightId > 0 &&
        flightDate.isNotEmpty &&
        reservationName.trim().isNotEmpty;
  }

  /// Creates a Reservation from a Map (useful for JSON/database conversion)
  /// Handles null ID values for new records
  ///
  /// [map] - Map containing reservation data
  ///
  /// Returns: Reservation instance created from map data
  factory Reservation.fromMap(Map<String, dynamic> map) {
    return Reservation(
      id: map['id'], // Can be null for new records
      customerId: map['customerId'] ?? 0,
      flightId: map['flightId'] ?? 0,
      flightDate: map['flightDate'] ?? '',
      reservationName: map['reservationName'] ?? '',
    );
  }

  /// Converts Reservation to Map (useful for JSON/database conversion)
  /// Excludes null ID values for database insertion
  ///
  /// Returns: Map representation of the reservation
  Map<String, dynamic> toMap() {
    final map = <String, dynamic>{
      'customerId': customerId,
      'flightId': flightId,
      'flightDate': flightDate,
      'reservationName': reservationName,
    };

    // Only include ID if it's not null (for updates)
    if (id != null) {
      map['id'] = id;
    }

    return map;
  }

  /// String representation of the Reservation for debugging
  /// Useful for console output and logging
  ///
  /// Returns: Human-readable string representation
  @override
  String toString() {
    return 'Reservation{id: ${id ?? 'null'}, customerId: $customerId, flightId: $flightId, '
        'flightDate: $flightDate, reservationName: $reservationName}';
  }

  /// Equality operator for comparing Reservation instances
  /// Two records are equal if they have the same ID
  /// New records (null ID) are never equal to existing records
  ///
  /// [other] - Object to compare with
  ///
  /// Returns: true if objects are equal, false otherwise
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
          other is Reservation &&
              runtimeType == other.runtimeType &&
              id != null &&
              other.id != null &&
              id == other.id;

  /// Hash code implementation based on ID
  /// Required when overriding equality operator
  /// Uses object hash for new records (null ID)
  ///
  /// Returns: Hash code for this instance
  @override
  int get hashCode => id?.hashCode ?? super.hashCode;
}