// lib/models/sale_record.dart
import 'package:floor/floor.dart';

/// SaleRecord entity class for Floor database storage
/// Represents a sales transaction record in the database
///
/// Project Requirements Addressed:
/// * Requirement 3: Database storage using Floor SQLite
/// * Data model for sales list page implementation
/// * Stores customer ID, car ID, dealership ID, and purchase date
/// * Implements proper database auto-increment for primary key
@entity
class SaleRecord {
  /// Primary key for the sale record
  /// Unique identifier for each sale transaction
  /// Uses auto-increment to ensure unique IDs across app restarts
  @PrimaryKey(autoGenerate: true)
  final int? id;

  /// ID of the customer who purchased the car
  /// Requirement: Integer representing customer ID (can be any int)
  final int customerId;

  /// ID of the car that was sold
  /// Requirement: Integer representing car ID from car inventory
  final int carId;

  /// ID of the dealership where the sale occurred
  /// Requirement: Integer representing dealership location ID
  final int dealershipId;

  /// Date when the purchase was made
  /// Requirement: Date of purchase as string format (YYYY-MM-DD)
  final String purchaseDate;

  /// Constructor for SaleRecord
  /// Primary key can be null for new records (auto-generated by database)
  ///
  /// [id] - Unique identifier (null for new records, auto-generated)
  /// [customerId] - Customer who made the purchase
  /// [carId] - Car that was purchased
  /// [dealershipId] - Dealership where sale occurred
  /// [purchaseDate] - Date of the purchase (YYYY-MM-DD format)
  SaleRecord({
    this.id,
    required this.customerId,
    required this.carId,
    required this.dealershipId,
    required this.purchaseDate,
  });

  /// Named constructor for creating new sale records without ID
  /// Database will auto-generate the ID when inserted
  ///
  /// [customerId] - Customer who made the purchase
  /// [carId] - Car that was purchased
  /// [dealershipId] - Dealership where sale occurred
  /// [purchaseDate] - Date of the purchase (YYYY-MM-DD format)
  ///
  /// Returns: New SaleRecord instance ready for database insertion
  factory SaleRecord.create({
    required int customerId,
    required int carId,
    required int dealershipId,
    required String purchaseDate,
  }) {
    return SaleRecord(
      id: null, // Auto-generated by database
      customerId: customerId,
      carId: carId,
      dealershipId: dealershipId,
      purchaseDate: purchaseDate,
    );
  }

  /// Getter for display title in ListView
  /// Requirement 1: ListView displays items inserted by user
  ///
  /// Returns: Formatted title string for list display
  String get displayTitle => 'Sale Record #${id ?? 'New'}';

  /// Getter for display subtitle in ListView
  /// Shows key information about the sale in compact format
  ///
  /// Returns: Formatted subtitle with customer, car, and date info
  String get displaySubtitle =>
      'Customer: $customerId | Car: $carId | Date: $purchaseDate';

  /// Getter for detailed information display
  /// Used in detail view when sale record is selected
  ///
  /// Returns: Formatted string with all sale information
  String get detailInfo =>
      'Sale ID: ${id ?? 'New'}\n'
          'Customer ID: $customerId\n'
          'Car ID: $carId\n'
          'Dealership ID: $dealershipId\n'
          'Purchase Date: $purchaseDate';

  /// Creates a copy of this SaleRecord with modified fields
  /// Useful for updates and data manipulation in forms
  ///
  /// [id] - New ID (optional, defaults to current)
  /// [customerId] - New customer ID (optional, defaults to current)
  /// [carId] - New car ID (optional, defaults to current)
  /// [dealershipId] - New dealership ID (optional, defaults to current)
  /// [purchaseDate] - New purchase date (optional, defaults to current)
  ///
  /// Returns: New SaleRecord instance with updated values
  SaleRecord copyWith({
    int? id,
    int? customerId,
    int? carId,
    int? dealershipId,
    String? purchaseDate,
  }) {
    return SaleRecord(
      id: id ?? this.id,
      customerId: customerId ?? this.customerId,
      carId: carId ?? this.carId,
      dealershipId: dealershipId ?? this.dealershipId,
      purchaseDate: purchaseDate ?? this.purchaseDate,
    );
  }

  /// Validates that all required fields have valid values
  /// Used for form validation before saving to database
  ///
  /// Returns: true if all fields are valid, false otherwise
  bool isValid() {
    return customerId > 0 &&
        carId > 0 &&
        dealershipId > 0 &&
        purchaseDate.isNotEmpty;
  }

  /// Creates a SaleRecord from a Map (useful for JSON/database conversion)
  /// Handles null ID values for new records
  ///
  /// [map] - Map containing sale record data
  ///
  /// Returns: SaleRecord instance created from map data
  factory SaleRecord.fromMap(Map<String, dynamic> map) {
    return SaleRecord(
      id: map['id'], // Can be null for new records
      customerId: map['customerId'] ?? 0,
      carId: map['carId'] ?? 0,
      dealershipId: map['dealershipId'] ?? 0,
      purchaseDate: map['purchaseDate'] ?? '',
    );
  }

  /// Converts SaleRecord to Map (useful for JSON/database conversion)
  /// Excludes null ID values for database insertion
  ///
  /// Returns: Map representation of the sale record
  Map<String, dynamic> toMap() {
    final map = <String, dynamic>{
      'customerId': customerId,
      'carId': carId,
      'dealershipId': dealershipId,
      'purchaseDate': purchaseDate,
    };

    // Only include ID if it's not null (for updates)
    if (id != null) {
      map['id'] = id;
    }

    return map;
  }

  /// String representation of the SaleRecord for debugging
  /// Useful for console output and logging
  ///
  /// Returns: Human-readable string representation
  @override
  String toString() {
    return 'SaleRecord{id: ${id ?? 'null'}, customerId: $customerId, carId: $carId, '
        'dealershipId: $dealershipId, purchaseDate: $purchaseDate}';
  }

  /// Equality operator for comparing SaleRecord instances
  /// Two records are equal if they have the same ID
  /// New records (null ID) are never equal to existing records
  ///
  /// [other] - Object to compare with
  ///
  /// Returns: true if objects are equal, false otherwise
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
          other is SaleRecord &&
              runtimeType == other.runtimeType &&
              id != null &&
              other.id != null &&
              id == other.id;

  /// Hash code implementation based on ID
  /// Required when overriding equality operator
  /// Uses object hash for new records (null ID)
  ///
  /// Returns: Hash code for this instance
  @override
  int get hashCode => id?.hashCode ?? super.hashCode;
}